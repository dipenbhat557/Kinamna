// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id        String    @id @default(cuid())
  houseNo   String?
  street    String?
  city      String
  district  String
  state     String
  pinCode   String
  landmark  String?
  isPrimary Boolean   @map("is_primary")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  store     Store[]
}

model Brand {
  id       String    @id @default(cuid())
  name     String
  logoUrl  String
  products Product[]
}

model Cart {
  id     String     @id @default(cuid())
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique @map("user_id")
  items  CartItem[]
}

model CartItem {
  id              String         @id @default(cuid())
  quantity        Int
  productVariant  ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId String        @map("product_variant_id")
  cart           Cart           @relation(fields: [cartId], references: [id])
  cartId         String         @map("cart_id")
}

model Category {
  id               String      @id @default(cuid())
  name             String      @map("category_name")
  imageUrl         String?     @default("")
  parentCategory   Category?   @relation("CategoryToCategory", fields: [parentCategoryId], references: [id])
  parentCategoryId String?     @map("parent_category_id")
  subCategories    Category[]  @relation("CategoryToCategory")
  products         Product[]
  promotions       Promotion[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
  NOT_SAY
}

model Order {
  id             String       @id @default(cuid())
  price          Int
  status         OrderStatus
  vendor         String
  orderDate      DateTime
  deliveryDate   DateTime?
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @map("user_id")
  payment        Payment?     @relation(fields: [paymentId], references: [id])
  paymentId      String?      @unique @map("payment_id")
  items          OrderItem[]
  promotion      Promotion?   @relation(fields: [promotionId], references: [id])
  promotionId    String?
  discountAmount Float?

  @@index([paymentId])
}

model OrderItem {
  id              String         @id @default(cuid())
  price           Int
  quantity        Int
  order           Order          @relation(fields: [orderId], references: [id])
  orderId         String         @map("order_id")
  productVariant  ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId String        @map("product_variant_id")
}

enum OrderStatus {
  PLACED
  ACCEPTED
  SHIPPED
  DELIVERING
  DELIVERED
}

model Payment {
  id          String        @id @default(cuid())
  paymentDate DateTime
  amount      Int
  status      PaymentStatus
  referenceId String?
  method      String
  order       Order?
}

enum PaymentStatus {
  FAILED
  PENDING
  SUCCESS
}

// Let’s say you're selling a T-Shirt.

// Product: "Classic T-Shirt"

// Category: "Men > Clothing > T-Shirts"

// Brand: "H&M"

// ProductOptionGroups: "Size", "Color" (linked to the product)

// ProductOptions: "S", "M", "L" (in Size), "Red", "Black" (in Color)

// ProductVariants:

// Variant 1: "Size: M", "Color: Black" → price: $15, SKU: "TSH123-BLK-M"

// Variant 2: "Size: L", "Color: Red" → price: $15, SKU: "TSH123-RED-L"

model Product {
  id           String               @id @default(cuid())
  name         String
  description  String
  imageUrl     String?
  sale         Sale?                @relation(fields: [saleId], references: [id])
  saleId       String?              @map("sale_id")
  brand        Brand                @relation(fields: [brandId], references: [id])
  brandId      String               @map("brand_id")
  category     Category             @relation(fields: [categoryId], references: [id])
  categoryId   String               @map("category_id")
  variants     ProductVariant[]
  reviews      Review[]
  wishlists    Wishlist[]
  optionGroups ProductOptionGroup[]
  promotions   Promotion[]
}

model ProductOption {
  id                  String            @id @default(cuid())
  name                String
  productOptionGroup  ProductOptionGroup @relation(fields: [productOptionGroupId], references: [id])
  productOptionGroupId String            @map("product_option_group_id")
  productVariants     ProductVariant[]
}

model ProductOptionGroup {
  id             String          @id @default(cuid())
  name           String
  product        Product         @relation(fields: [productId], references: [id])
  productId      String          @map("product_id")
  productOptions ProductOption[]
}

model ProductVariant {
  id             String          @id @default(cuid())
  sku            String
  price          Int
  stock          Int
  product        Product         @relation(fields: [productId], references: [id])
  productId      String          @map("product_id")
  productOptions ProductOption[]
  store          Store?          @relation(fields: [storeId], references: [id])
  storeId        String?         @map("store_id")
  images         String[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
}

model Review {
  id        String    @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  product   Product   @relation(fields: [productId], references: [id])
  productId String    @map("product_id")
}

model Sale {
  id           String    @id @default(cuid())
  description  String
  startDate    DateTime
  endDate      DateTime
  discount     Int
  isPercentage Boolean   @map("is_percentage")
  imageUrl     String
  products     Product[]
}

model Store {
    id         String          @id @default(cuid())
  name       String
  location   Address         @relation(fields: [locationId], references: [id])
  locationId String          @map("location_id")
  contact    String
  manager    User            @relation(fields: [managerId], references: [id])
  managerId  String          @map("manager_id")
  variants   ProductVariant[]
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BLACKLISTED
  PENDING_VERIFICATION
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPPORT
}

model User {
  id              String      @id @default(cuid())
  firstName       String
  lastName        String
  email           String      @unique
  password        String
  isVerified      Boolean     @default(false)
  phoneNo         String
  dob            DateTime
  gender         Gender
  profileUrl      String
  status         UserStatus   @default(ACTIVE)
  role           UserRole     @default(CUSTOMER)
  isFraudSuspected Boolean    @default(false)
  fraudReason     String?
  lastLoginAt     DateTime?
  loginAttempts   Int         @default(0)
  addresses       Address[]
  cart           Cart?
  orders         Order[]
  reviews        Review[]
  store          Store[]
  wishlist       Wishlist?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Wishlist {
  id       String    @id @default(cuid())
  products Product[]
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique @map("user_id")
}

// Promotion Models - Optional Feature
// These models can be safely removed without affecting core functionality

enum PromotionType {
  PERCENTAGE   // Percentage discount (e.g., 20% off)
  FIXED_AMOUNT // Fixed amount discount (e.g., $10 off)
}

enum PromotionStatus {
  ACTIVE
  SCHEDULED
  EXPIRED
  DISABLED
}

// Main promotion model
model Promotion {
  id            String           @id @default(cuid())
  name          String
  description   String?
  type          PromotionType
  value         Float
  status        PromotionStatus  @default(SCHEDULED)
  startDate     DateTime
  endDate       DateTime
  usageLimit    Int?
  usedCount     Int             @default(0)
  couponCode    String?         @unique
  minOrderValue Float?
  products      Product[]
  categories    Category[]
  orders        Order[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([status, startDate, endDate])
  @@index([couponCode])
}
