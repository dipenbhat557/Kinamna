type Query {
  
  getAddress(id: Int!): Address
  listAddresses: [Address]

  getAllProducts: [Product]
  getProductById(productId: ID!): Product
}

type Mutation {
  
  createAddress(input: AddressInput!): Address
  updateAddress(id: Int!, input: AddressInput!): Address
  deleteAddress(id: Int!): Boolean

  createProduct(name: String!, description: String, price: Float, categoryId: ID): Product
  updateProduct(productId: ID!, name: String, description: String, price: Float, categoryId: ID): Product
  deleteProduct(productId: ID!): Boolean
  
}


type Address {
    id: Int
    houseNo: Int
    street: String
    city: String
    district: String
    state: String
    pinCode: String
    landmark: String
    isPrimary: Boolean
    user: User
}

input AddressInput {
    houseNo: Int!
    street: String!
    city: String!
    district: String!
    state: String!
    pinCode: String!
    landmark: String
    isPrimary: Boolean!
    userId: Int!
}

type Product {
  productId: ID!
  name: String!
  description: String
  price: Float
  category: Category
  variants: [ProductVariant]
}

type ProductVariant {
  variantId: ID!
  sku: String
  price: Float
  stock: Int
  product: Product
}

type Category {
  categoryId: ID!
  categoryName: String!
  products: [Product]
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    phoneNumber: String!
    profile: String
    dob: Date
    isVerified: Boolean!
    gender: String!
}

input UserInput {
    firstName: String!
    lastName: String!
    email: String!
    phoneNumber: String!
    password: String!
    dob: Date
    gender: String!
}