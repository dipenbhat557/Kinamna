name: Build and Deploy Backend to EC2

on:
  push:
    branches: [main]
    paths:
      - "express-backend/**"

env:
  IMAGE_NAME: your-dockerhub-username/kinumna-backend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./express-backend
          file: ./express-backend/Dockerfile.prod
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Copy deployment files to EC2
        run: |
          scp -o StrictHostKeyChecking=no express-backend/docker-compose.ec2.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.DEPLOY_DIR }}/
          scp -o StrictHostKeyChecking=no express-backend/.env.production ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.DEPLOY_DIR }}/

      - name: SSH and deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            cd ${{ secrets.DEPLOY_DIR }}
            
            # Update the image name in docker-compose file
            sed -i "s|image: .*|image: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}|g" docker-compose.ec2.yml
            
            # Pull the new image
            sudo docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            
            # Deploy with new image
            sudo docker-compose -f docker-compose.ec2.yml down
            sudo docker-compose -f docker-compose.ec2.yml up -d
            
            # Clean up old images
            sudo docker image prune -f
          EOF
